<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               skinClass="PlaygroundSkin" creationComplete="creationComplete();">
    <fx:Style source="default.css"/>
    <s:SkinnableContainer id="_playground" width="100%" height="100%">
        <s:layout>
            <s:BasicLayout clipAndEnableScrolling="true"/>
        </s:layout>
    </s:SkinnableContainer>

    <s:SkinnableContainer id="_gameOverPanel" styleName="gameOverPanel" width="100%" height="100%" includeIn="gameover"
                          mouseDown="event.stopPropagation()">
        <s:layout>
            <s:VerticalLayout gap="10" verticalAlign="middle" horizontalAlign="center"/>
        </s:layout>
        <s:Label lineBreak="explicit" styleName="gameOverLabel">
            <s:text>{"Game over!\nYour score: " + _model.score}</s:text>
        </s:Label>
        <s:Button id="restartButton" styleName="restartButton" label="Start again!" click="restart();"/>
    </s:SkinnableContainer>

    <s:Label id="_scoreLabel" styleName="scoreLabel"/>
    <s:Label id="_timeLabel" styleName="timeLabel"/>

    <s:states>
        <s:State name="play"/>
        <s:State name="gameover"/>
    </s:states>

    <fx:Script><![CDATA[
        import model.IDuck;
        import model.PlayModel;
        import model.ScoreChangeEvent;

        import mx.core.BitmapAsset;
        import mx.managers.CursorManagerPriority;

        import view.DuckShape;

        /**
         * game frame rate in ms
         */
        private static const ADVANCE_DELAY: int = 50;

        /**
         * next duck appearance delay
         */
        private static const NEW_DUCK_DELAY: int = 1500;

        /**
         * play time in ms
         */
        private static const PLAY_TIME: int = 60 * 1000;

        private static const RESTORE_CURSOR_DELAY: int = 100; // ms

        private var _model: PlayModel;
        private var _startTime: Number;
        private var _advanceTimer: Timer;
        private var _newDuckTimer: Timer;

        // id of a temporary cursor shown on shot
        private var _shotCursorId: int;

        // id of a sight cursor shown during the game
        private var _sightCursorId: int;

        [Embed(source="/cursor.png")]
        private static var _cursorClass: Class;

        [Embed(source="/cursor-fire.png")]
        private static var _fireCursorClass: Class;


        private var _sightCursorAsset: BitmapAsset = new _cursorClass();

        private function creationComplete(): void {
            addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
            startGame();
        }

        private function startGame(): void {
            _sightCursorId = cursorManager.setCursor(_cursorClass, CursorManagerPriority.MEDIUM, -_sightCursorAsset.width / 2, -_sightCursorAsset.height / 2);

            _model = new PlayModel(visibleAreaProvider);

            _model.addEventListener(ScoreChangeEvent.NAME, function(event: ScoreChangeEvent): void {
                updateStatistics();
            });

            _advanceTimer = new Timer(ADVANCE_DELAY);
            _advanceTimer.addEventListener(TimerEvent.TIMER, function(e: TimerEvent): void {
                if (getTimeLeft() <= 0) {
                    gameOver();
                }
                _model.advanceAllDucks();
                updateStatistics();
            });

            _newDuckTimer = new Timer(NEW_DUCK_DELAY);
            _newDuckTimer.addEventListener(TimerEvent.TIMER, function(e: TimerEvent): void {
                newDuck();
            });

            updateStatistics();
            setCurrentState("play");

            newDuck();
            _advanceTimer.start();
            _newDuckTimer.start();

            _startTime = new Date().getTime();
        }

        private function gameOver(): void {
            _advanceTimer.stop();
            _newDuckTimer.stop();
            cursorManager.removeCursor(_sightCursorId);
            setCurrentState("gameover");
        }


        private function mouseDown(event: MouseEvent): void {
            var cursorAsset: BitmapAsset = new _cursorClass();
            _shotCursorId = cursorManager.setCursor(_fireCursorClass, CursorManagerPriority.HIGH, -cursorAsset.width / 2, -cursorAsset.height / 2);
            var restoreCursorTimer: Timer = new Timer(RESTORE_CURSOR_DELAY, 1);
            restoreCursorTimer.addEventListener(TimerEvent.TIMER, function(e: TimerEvent): void {
                cursorManager.removeCursor(_shotCursorId);
            });
            restoreCursorTimer.start();


            if (!(event.target is DuckShape)) {
                _model.miss();
            }
        }

        private function visibleAreaProvider(): Rectangle {
            return new Rectangle(0, 0, _playground.width, _playground.height);
        }

        private function newDuck(): void {
            var duck: IDuck = _model.createNewDuck();
            var shape: DuckShape = new DuckShape(duck);
            _playground.addElement(shape);
        }

        /**
         * @return The time left to play, in seconds
         */
        private function getTimeLeft(): int {
            var currentTime: Number = new Date().getTime();
            return (_startTime + PLAY_TIME - currentTime) / 1000;
        }

        private function updateStatistics(): void {
            _scoreLabel.text = "Score: " + _model.score;
            _timeLabel.text = "Time: " + Math.max(0, getTimeLeft());
        }

        private function restart(): void {
            _playground.removeAllElements();
            startGame();
        }
        ]]></fx:Script>
</s:Application>
